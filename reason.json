{
  "scopeName": "source.reason",
  "fileTypes": [
    "re",
    "rei"
  ],
  "patterns": [
    { "include": "#module-expression-block-item" },
    { "include": "#value-expression" }
  ],
  "repository": {
    "attribute": {
      "begin": "(?=\\[(@{1,3})[[:space:]]*[[:alpha:]])",
      "end": "\\]",
      "patterns": [
        {
          "begin": "\\[(@{1,3})",
          "end": "(?=[^_\\.'[:word:]])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#attribute-identifier" }
          ]
        },
        { "include": "#attribute-payload" }
      ]
    },
    "attribute-identifier": {
      "patterns": [
        {
          "match": "\\b([[:alpha:]][[:word:]]*)\\b[[:space:]]*(?:(\\.))",
          "captures": {
            "1": { "name": "entity.name.class" },
            "2": { "name": "keyword.other" }
          }
        },
        {
          "name": "constant.language",
          "match": "\\b([[:alpha:]][[:word:]]*)\\b"
        }
      ]
    },
    "attribute-payload": {
      "patterns": [
        {
          "begin": "(:)",
          "end": "(?=\\])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#module-expression" },
            { "include": "#module-item-type" },
            { "include": "#type-expression" }
          ]
        },
        {
          "begin": "([\\?])",
          "end": "(?=\\])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#pattern-guard" },
            { "include": "#pattern" }
          ]
        },
        { "include": "#module-expression-block-item" },
        { "include": "#value-expression" }
      ]
    },
    "class-item-inherit": {
      "begin": "\\b(inherit)\\b",
      "end": "(;)|(?=[\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "class-item-method": {
      "begin": "\\b(method)\\b",
      "end": "(;)|(?=[\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
		"comment": {
			"name": "comment.reason",
			"patterns": [
				{ "include": "#comment-block-doc" },
				{	"include": "#comment-block"	}
			]
		},
		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.reason",
      "patterns": [
        { "include": "#comment" }
      ]
		},
		"comment-block-doc": {
			"begin": "/\\*\\*(?!/)",
			"end": "\\*/",
			"name": "comment.block.documentation.reason",
      "patterns": [
        { "include": "#comment" }
      ]
		},
    "condition-lhs": {
      "begin": "(?<![#\\-:!?.@*/&%^+<=>|~$\\\\])([\\?])(?![#\\-:!?.@*/&%^+<=>|~$\\\\])",
      "end": "(?=[\\)])",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "match": "(?:\\b|[[:space:]]+)([?])(?:\\b|[[:space:]]+)",
          "name": "keyword.other"
        },
        { "include": "#value-expression" }
      ]
    },
    "extension-node": {
      "begin": "(?=\\[(%{1,3})[[:space:]]*[[:alpha:]])",
      "end": "\\]",
      "patterns": [
        {
          "begin": "\\[(%{1,3})",
          "end": "(?=[^_\\.'[:word:]])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#attribute-identifier" }
          ]
        },
        { "include": "#attribute-payload" }
      ]
    },
    "jsx": {
      "patterns": [
        { "include": "#jsx-head" },
        { "include": "#jsx-tail" }
      ]
    },
    "jsx-attributes": {
      "patterns": [
        {
          "begin": "\\b([[:lower:]][[:word:]]*)\\b[[:space:]]*(=)",
          "end": "(?<![=])(?=[/>[:lower:]])",
          "beginCaptures": {
            "1": { "name": "constant.language" },
            "2": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#value-expression-atomic" }
          ]
        },
        {
          "match": "\\b([[:lower:]][[:word:]]*)\\b",
          "name": "constant.language"
        }
      ]
    },
    "jsx-body": {
      "begin": "(>)",
      "end": "(?=</)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "comment": "FIXME: seems necessary in order to properly tokenize `[[:word:]]</` boundary",
          "match": "[[:lower:]][[:word:]]*"
        },
        { "include": "#value-expression" }
      ]
    },
    "jsx-head": {
      "begin": "(<)(?=[_[:alpha:]])",
      "end": "(?=(/>)|(</))",
      "applyEndPatternLast": true,
      "beginCaptures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "entity.name.function" }
      },
      "patterns": [
        {
          "begin": "\\G",
          "end": "(?=[[:space:]/>])",
          "patterns": [
            { "include": "#module-path-simple" },
            {
              "match": "\\b[[:lower:]][[:word:]]*\\b",
              "name": "entity.name.function"
            }
          ]
        },
        { "include": "#jsx-attributes" },
        { "include": "#jsx-body" }
      ]
    },
    "jsx-tail": {
      "begin": "\\G(/>)|(</)",
      "end": "(>)",
      "applyEndPatternLast": true,
      "beginCaptures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-path-simple" },
        {
          "match": "\\b[[:lower:]][[:word:]]*\\b",
          "name": "entity.name.function"
        }
      ]
    },
    "module-expression": {
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "\\(",
          "end": "\\)|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|with)\\b)",
          "patterns": [
            { "include": "#comment" },
            {
              "comment": "FIXME: might need to refactor this or include more expressions",
              "include": "#module-expression-block"
            },
            {
              "begin": "\\b(val)\\b",
              "end": "(?=\\))|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#comment" },
                {
                  "match": "\\b([[:lower:]][[:word:]]*)\\b",
                  "name": "entity.name.class"
                }
              ]
            },
            { "include": "#module-path-simple" },
            {
              "begin": "([:])",
              "end": "(?=[\\)])|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val)\\b)",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#signature-expression" }
              ]
            }
          ]
        },
        { "include": "#module-path-simple" },
        { "include": "#module-expression-block" }
      ]
    },
    "module-expression-block": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#module-expression-block-item" }
      ]
    },
    "module-expression-block-item": {
      "patterns": [
        { "include": "#attribute" },
        { "include": "#comment" },
        { "include": "#module-item-exception" },
        { "include": "#module-item-include" },
        { "include": "#module-item-let" },
        { "include": "#module-item-class-type" },
        { "include": "#module-item-module-type" },
        { "include": "#module-item-module" },
        { "include": "#module-item-open" },
        { "include": "#module-item-type" }
      ]
    },
    "signature-expression-constraints": {
      "begin": "(?=\\b(with))",
      "end": "(?=[;\\)\\}]|\\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val)\\b)",
      "patterns": [
        {
          "begin": "\\b(and|with)\\b",
          "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val|with)\\b)",
          "beginCaptures": {
            "1": { "name": "storage.modifier" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "comment": "FIXME: special version of #module-item-type with non-consuming `;`. Atom seems to need this to work.",
              "begin": "\\b(type)\\b",
              "end": "(?=[;\\)\\}]|\\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val|with)\\b)",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#module-item-type-and" },
                { "include": "#module-item-type-constraint" },
                { "include": "#module-item-type-bind" }
              ]
            },
            {
              "begin": "(?=\\b(module)\\b)",
              "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|val|with)\\b)",
              "patterns": [
                {
                  "begin": "\\b(module)\\b",
                  "end": "(?=:?=|[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\\b)",
                  "patterns": [
                    { "include": "#comment" },
                    { "include": "#module-path-simple" },
                    {
                      "match": "[[:upper:]][[:word:]]*",
                      "name": "entity.name.class"
                    }
                  ],
                  "beginCaptures": {
                    "1": { "name": "storage.type" }
                  }
                },
                {
                  "begin": "(:?=)",
                  "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\\b)",
                  "patterns": [
                    { "include": "#module-expression" }
                  ],
                  "beginCaptures": {
                    "1": { "name": "keyword.other" }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    "module-name-extended": {
      "patterns": [
        { "include": "#module-name-simple" },
        {
          "begin": "([\\(])",
          "end": "([\\)])",
          "captures": {
            "1": { "name": "constant.language" }
          },
          "patterns": [
            { "include": "#module-path-extended" }
          ]
        }
      ]
    },
    "module-name-simple": {
      "match": "\\b[[:upper:]][[:word:]]*\\b",
      "name": "entity.name.class"
    },
    "module-path-extended": {
      "patterns": [
        { "include": "#module-name-extended" },
        { "include": "#comment" },
        {
          "comment": "NOTE: end early to avoid too much reparsing",
          "begin": "([\\.])",
          "end": "(?<=[[:word:]\\)])|(?=[^\\.[:upper:]/])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(?<=[\\.])",
              "end": "(?<=[[:word:]\\)])|(?=[^\\.[:upper:]/])",
              "patterns": [
                { "include": "#comment" },
                { "include": "#module-name-extended" }
              ]
            }
          ]
        }
      ]
    },
    "module-path-simple": {
      "patterns": [
        { "include": "#module-name-simple" },
        { "include": "#comment" },
        {
          "comment": "NOTE: end early to avoid too much reparsing",
          "begin": "([\\.])",
          "end": "(?<=[[:word:]\\)])|(?=[^\\.[:upper:]/])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(?<=[\\.])",
              "end": "(?<=[[:word:]\\)])|(?=[^\\.[:upper:]/])",
              "patterns": [
                { "include": "#comment" },
                { "include": "#module-name-simple" }
              ]
            }
          ]
        }
      ]
    },
    "module-prefix-extended": {
      "begin": "(?=\\b[[:upper:]])",
      "end": "([\\.])|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-path-extended" }
      ]
    },
    "module-prefix-simple": {
      "begin": "(?=\\b[[:upper:]])",
      "end": "([\\.])|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-path-simple" }
      ]
    },
    "module-item-class-type": {
      "comment": "FIXME: proper parsing",
      "begin": "\\b(class)\\b",
      "end": "(;)|(?=[\\}]|\\b(and|class|constraint|exception|external|include|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "(?:\\G|^)[[:space:]]*\\b(type)\\b",
          "end": "(?==)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#module-item-type-bind-name-tyvars" }
          ]
        },
        {
          "begin": "(=)",
          "end": "(?=;)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#attribute" },
            { "include": "#comment" },
            { "include": "#class-item-inherit" },
            { "include": "#class-item-method" }
          ]
        }
      ]
    },
    "module-item-exception": {
      "begin": "\\b(exception)\\b",
      "end": "(;)|(?=[\\}]|\\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-type-bind-body-item" }
      ]
    },
    "module-item-include": {
      "begin": "\\b(include)\\b",
      "end": "(;)|(?=[\\}]|\\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#signature-expression" }
      ]
    },
    "module-item-let": {
      "comment": "FIXME: move external to separate rule",
      "begin": "\\b(external|let)\\b",
      "end": "(;)|(?=[\\}]|\\b(class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-let-module" },
        { "include": "#module-item-let-value" }
      ]
    },
    "module-item-let-module": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(module)\\b",
      "end": "(?=[;\\}]|\\b(class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-item-let-module-and" },
        { "include": "#module-item-let-module-rec" },
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-let-module-and": {
      "begin": "\\b(and)\\b",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-let-module-bind-body": {
      "begin": "(=>?)",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-expression" }
      ]
    },
    "module-item-let-module-bind-name-params": {
      "begin": "\\b([[:upper:]][[:word:]]*)\\b",
      "end": "(?=[;:\\}=]|\\b(class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "entity.name.class" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-item-let-module-param" }
      ]
    },
    "module-item-let-module-bind-name-params-type-body": {
      "begin": "(?:\\G|^)",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-item-let-module-bind-name-params" },
        { "include": "#module-item-let-module-bind-type" },
        { "include": "#module-item-let-module-bind-body" }
      ]
    },
    "module-item-let-module-bind-type": {
      "begin": "(:)",
      "end": "(?=[;\\}=]|\\b(and|class|constraint|exception|external|include|inherit|let|method|nonrec|open|private|rec|type|val)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#signature-expression" }
      ]
    },
    "module-item-let-module-param": {
      "begin": "(?=\\()",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\(",
          "end": "(?=[:])",
          "patterns": [
            { "include": "#comment" },
            { "include": "#module-name-simple" }
          ]
        },
        {
          "begin": "(:)",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#signature-expression" }
          ]
        }
      ]
    },
    "module-item-let-module-rec": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(rec)\\b",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.modifier.rec.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-let-value": {
      "patterns": [
        { "include": "#module-item-let-value-and" },
        { "include": "#module-item-let-value-rec" },
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
    "module-item-let-value-and": {
      "begin": "\\b(and)\\b",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
    "module-item-let-value-bind-body": {
      "begin": "(=>?)",
      "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "module-item-let-value-bind-name-params": {
      "begin": "(?:\\G|^)[[:space:]]*(?!\\blazy\\b)(?!\\blet\\b)(?:\\b([_][[:word:]]+)\\b|\\b([[:lower:]][[:word:]]*)\\b)",
      "end": "(?<!:)(?!::)(?=[;:\\}=]|\\b(class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "comment.line" },
        "2": { "name": "entity.name.function" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-item-let-value-param" }
      ]
    },
    "module-item-let-value-bind-name-params-type-body": {
      "begin": "(?<=and|external|let|method|rec)",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params" },
        { "include": "#module-item-let-value-bind-pattern" },
        { "include": "#module-item-let-value-bind-type" },
        { "include": "#module-item-let-value-bind-body" }
      ]
    },
    "module-item-let-value-bind-parens-params": {
      "begin": "(?=\\([^\\)])",
      "end": "(?!::)(?=[:=])|(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        {
          "begin": "\\G\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#operator" },
            { "include": "#pattern-parens-lhs" },
            { "include": "#type-annotation-rhs" },
            { "include": "#pattern" }
          ]
        },
        { "include": "#module-item-let-value-param" }
      ]
    },
    "module-item-let-value-bind-pattern": {
      "begin": "(?<=and|external|let|method|rec)",
      "end": "(?=[;:}=]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-item-let-value-bind-parens-params" },
        { "include": "#pattern" }
      ]
    },
    "module-item-let-value-bind-type": {
      "comment": "FIXME: lookahead",
      "begin": "(:)(?![[:space:]]*[\\)])",
      "end": "(?==(?!>)|[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "\\b(type)\\b|(?<=[:])[[:space:]]*+(?!\\b(type)\\b)(?=(?:[[:space:]]*[[:lower:]][[:word:]]*)*[\\.])",
          "end": "([\\.])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "endCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#pattern-variable" }
          ]
        },
        { "include": "#type-expression" }
      ]
    },
    "module-item-let-value-param": {
      "patterns": [
        { "include": "#module-item-let-value-param-label" },
        { "include": "#module-item-let-value-param-type" },
        { "include": "#module-item-let-value-param-module" },
        { "include": "#pattern" }
      ]
    },
    "module-item-let-value-param-label": {
      "patterns": [
        {
          "begin": "\\b([[:lower:]][[:word:]]*)\\b[[:space:]]*(::)",
          "end": "(?<=[[:space:]])",
          "beginCaptures": {
            "1": { "name": "constant.language" },
            "2": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#pattern" },
            {
              "begin": "(=)",
              "end": "(\\?)|(?<=[^[:space:]=][[:space:]])(?=[[:space:]]*+[^\\.])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "endCaptures": {
                "1": { "name": "storage.type" }
              },
              "patterns": [
                { "include": "#value-expression-atomic" },
                { "include": "#value-expression-record-suffix" }
              ]
            }
          ]
        }
      ]
    },
    "module-item-let-value-param-module": {
      "comment": "FIXME: merge with pattern-parens",
      "begin": "\\([[:space:]]*(?=\\b(module)\\b)",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\b(module)\\b",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "match": "\\b[[:upper:]][[:word:]]*\\b",
              "name": "entity.name.class"
            }
          ]
        }
      ]
    },
    "module-item-let-value-param-type": {
      "comment": "FIXME: merge with pattern-parens",
      "begin": "\\((?=\\b(type)\\b)",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\b(type)\\b",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#pattern-variable" }
          ]
        }
      ]
    },
    "module-item-let-value-rec": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(rec)\\b",
      "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.modifier.rec.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
    "module-item-module": {
      "comment": "NOTE: this is to support the let-module case without the let prefix",
      "begin": "\\b(module)\\b[[:space:]]*(?!\\b(type)\\b|$)",
      "end": "(;)|(?=[\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-let-module-and" },
        { "include": "#module-item-let-module-rec" },
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-module-type": {
      "begin": "\\b(module)\\b[[:space:]]*(?=\\b(type)\\b|$)",
      "end": "(;)|(?=[\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "(?:\\G|^)[[:space:]]*\\b(type)\\b",
          "end": "(?==)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "match": "([[:upper:]][[:word:]]*)",
              "captures": {
                "1": { "name": "entity.name.class" }
              }
            }
          ]
        },
        {
          "begin": "(=)",
          "end": "(?=;)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#comment" },
            { "include": "#module-expression" }
          ]
        }
      ]
    },
    "module-item-open": {
      "begin": "\\b(open)\\b",
      "end": "(;)|(?=[\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-path-simple" }
      ]
    },
    "module-item-type": {
      "comment": "FIXME: the semi-colon is optional so we can re-use this for hover, which does not print the trailing ;",
      "begin": "\\b(type)\\b",
      "end": "([;])|(?=[\\)\\}]|\\b(class|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-type-and" },
        { "include": "#module-item-type-constraint" },
        { "include": "#module-item-type-bind" }
      ]
    },
    "module-item-type-and": {
      "comment": "FIXME: the optional `type` is for module constraints",
      "begin": "\\b(and)\\b([[:space:]]*type)?",
      "end": "(?=[;\\)\\}]|\\b(class|exception|external|include|inherit|let|method|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-type-bind-name-tyvars-body" }
      ]
    },
    "module-item-type-bind": {
      "comment": "FIXME: only allow module paths before type variables",
      "patterns": [
        { "include": "#module-item-type-bind-nonrec" },
        { "include": "#module-item-type-bind-name-tyvars-body" }
      ]
    },
    "module-item-type-bind-body": {
      "comment": "FIXME: parsing",
      "begin": "(\\+?=)",
      "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-type-bind-body-item" }
      ]
    },
    "module-item-type-bind-body-item": {
      "patterns": [
        {
          "comment": "FIXME: specialized version of variant rule that also scans for (",
          "match": "\\b([[:upper:]][[:word:]]*)\\b(?![[:space:]]*[\\.\\(])",
          "captures": {
            "1": { "name": "constant.language.reason" }
          }
        },
        {
          "comment": "FIXME: add separate rule; parsing",
          "match": "(?:\\G|^)[[:space:]]*\\b(private)\\b",
          "captures": {
            "1": { "name": "keyword.other" }
          }
        },
        {
          "begin": "(\\.\\.)",
          "end": "(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          }
        },
        {
          "begin": "(\\|)(?!\\|)[[:space:]]*",
          "end": "(?=[;\\)\\}]|\\|(?!\\|)|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#value-expression-literal-constructor-variant" },
            {
              "begin": "[[:space:]]*+",
              "end": "(?=[;\\)\\}]|\\|(?!\\|)|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                {
                  "match": "\\b(of)\\b",
                  "name": "keyword.other"
                },
                { "include": "#type-expression" }
              ]
            }
          ]
        },
        {
          "comment": "FIXME: remove this once the pretty printer no longer outputs 'of'",
          "match": "[:|]|\\b(of)\\b",
          "name": "keyword.other"
        },
        { "include": "#type-expression" }
      ]
    },
    "module-item-type-bind-nonrec": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(nonrec)\\b",
      "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "storage.modifier.nonrec.reason" }
      },
      "patterns": [
        { "include": "#module-item-type-bind-name-tyvars-body" }
      ]
    },
    "module-item-type-bind-name-tyvars": {
      "begin": "(?<=\\G|^|\\.)[[:space:]]*\\b([[:lower:]][[:word:]]*)\\b",
      "end": "(?=\\+?=|[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "entity.name.function" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#attribute" },
        {
          "match": "_",
          "name": "comment.line"
        },
        {
          "comment": "FIXME: add separate type-variable rule",
          "match": "([+\\-])?(?:(_)|'([[:lower:]][[:word:]]*)\\b)(?!\\.[[:upper:]])",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "comment.line" },
            "3": { "name": "variable.parameter" }
          }
        }
      ]
    },
    "module-item-type-bind-name-tyvars-body": {
      "begin": "(?=(\\G|^)[[:space:]]*\\b[[:alpha:]])",
      "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#module-prefix-simple" },
        { "include": "#module-item-type-bind-name-tyvars" },
        { "include": "#module-item-type-bind-body" }
      ]
    },
    "module-item-type-constraint": {
      "comment": "FIXME: proper parsing",
      "begin": "\\b(constraint)\\b",
      "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "comment": "FIXME: add separate type-variable rule",
          "match": "([+\\-])?'([_[:lower:]][[:word:]]*)\\b(?!\\.[[:upper:]])",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "variable.parameter" }
          }
        },
        {
          "match": "=",
          "name": "keyword.other"
        },
        { "include": "#type-expression" }
      ]
    },
    "pattern": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#pattern-atomic" },
        {
          "match": "[[:space:]]*+(\\b(as)\\b|\\|(?!\\|))[[:space:]]*+",
          "captures": {
            "1": { "name": "keyword.other" }
          }
        }
      ]
    },
    "pattern-atomic": {
      "patterns": [
        { "include": "#value-expression-literal" },
        { "include": "#module-prefix-simple" },
        { "include": "#pattern-list" },
        { "include": "#pattern-record" },
        { "include": "#pattern-variable" },
        { "include": "#pattern-parens" }
      ]
    },
    "pattern-guard": {
      "begin": "\\b(when)\\b",
      "end": "(?==>)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "pattern-list": {
      "begin": "(\\[)(?![@%])",
      "end": "(\\])",
      "beginCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "endCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "patterns": [
        { "include": "#value-expression-literal-list-separator" },
        { "include": "#pattern" }
      ]
    },
    "pattern-parens": {
      "begin": "(?=\\()",
      "end": "\\)|(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#pattern-parens-lhs" },
        { "include": "#type-annotation-rhs" }
      ]
    },
    "pattern-parens-lhs": {
      "begin": "(?:\\(|(,))",
      "end": "(?=(?:[,:\\)]))|(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#pattern" }
      ]
    },
    "pattern-record": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#comment" },
        { "include": "#pattern-record-item" }
      ]
    },
    "pattern-record-field": {
      "begin": "\\b([_][[:word:]]*)\\b|\\b([[:lower:]][[:word:]]*)\\b",
      "end": "(,)|(?=\\})",
      "beginCaptures": {
        "1": { "name": "comment.line" },
        "2": { "name": "constant.language.field.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "\\G(:)",
          "end": "(?=[,\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#pattern" }
          ]
        }
      ]
    },
    "pattern-record-item": {
      "patterns": [
        { "include": "#module-prefix-simple" },
        { "include": "#pattern-record-field" }
      ]
    },
    "pattern-variable": {
      "patterns": [
        {
          "match": "\\b(_(?:[[:lower:]][[:word:]]*)?)\\b(?!\\.[[:upper:]])",
          "captures": {
            "1": { "name": "comment.line" }
          }
        },
        {
          "match": "\\b([[:lower:]][[:word:]]*)\\b(?!\\.[[:upper:]])",
          "captures": {
            "1": { "name": "variable.parameter" }
          }
        }
      ]
    },
    "object-item": {
      "begin": "(?:\\G|(;))",
      "end": "(?=[;\\}]|\\b(class|constraint|exception|external|include|let|module|nonrec|open|private|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#class-item-method" }
      ]
    },
    "operator": {
      "patterns": [
        { "include": "#operator-infix" },
        { "include": "#operator-prefix" }
      ]
    },
    "operator-infix-builtin": {
      "name": "keyword.other",
      "match": ":="
    },
    "operator-infix": {
      "patterns": [
        {
          "match": ";",
          "name": "keyword.other"
        },
        { "include": "#operator-infix-builtin" },
        { "include": "#operator-infix-custom" },
        { "comment": "#operator-infix-custom-hash" }
      ]
    },
    "operator-infix-custom": {
      "name": "keyword.other",
      "match": "[#\\-@*/&%^+<=>|$][#\\-:!?.@*/&%^+<=>|~$\\\\]*"
    },
    "operator-infix-custom-hash": {
      "name": "keyword.other",
      "match": "#[\\-:!?.@*/&%^+<=>|~$]+"
    },
    "operator-prefix": {
      "patterns": [
        { "include": "#operator-prefix-bang" },
        { "include": "#operator-prefix-label-token" }
      ]
    },
    "operator-prefix-bang": {
      "name": "keyword.other",
      "match": "![\\-:!?.@*/&%^+<=>|~$]*"
    },
    "operator-prefix-label-token": {
      "name": "keyword.other",
      "match": "[?~][\\-:!?.@*/&%^+<=>|~$]+"
    },
    "signature-expression": {
      "patterns": [
        {
          "begin": "\\b(module)\\b[[:space:]]*\\b(type)\\b([[:space:]]*\\b(of)\\b)?",
          "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
          "beginCaptures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "keyword.other" },
            "3": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#comment" },
            { "include": "#module-path-simple" },
            {
              "match": "\\b([[:upper:]][[:word:]]*)\\b",
              "name": "entity.name.class"
            }
          ]
        },
        { "include": "#signature-expression-constraints" },
        { "include": "#module-expression" }
      ]
    },
    "type-annotation-rhs": {
      "begin": "(?<![#\\-:!?.@*/&%^+<=>|~$\\\\])([:])(?![#\\-:!?.@*/&%^+<=>|~$\\\\])",
      "end": "(?=\\))|(?=[,;}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#type-expression" }
      ]
    },
    "type-expression": {
      "comments": "FIXME: higher-rank, objects, poly-variants, etc.",
      "patterns": [
        { "include": "#attribute" },
        { "include": "#comment" },
        { "include": "#module-prefix-extended" },
        { "include": "#type-expression-label" },
        { "include": "#type-expression-arrow" },
        { "include": "#type-expression-constructor" },
        { "include": "#type-expression-object" },
        { "include": "#type-expression-parens" },
        { "include": "#type-expression-polymorphic-variant" },
        { "include": "#type-expression-record" },
        { "include": "#type-expression-variable" }
      ]
    },
    "type-expression-arrow": {
      "name": "keyword.other",
      "match": "=>"
    },
    "type-expression-constructor": {
      "match": "(_)(?![[:alnum:]])|\\b([_[:lower:]][[:word:]]*)\\b(?!\\.[[:upper:]])",
      "captures": {
        "1": { "name": "comment.line" },
        "2": { "name": "support.type" }
      }
    },
    "type-expression-label": {
      "begin": "\\b([_[:lower:]][[:word:]]*)\\b(::)",
      "end": "(?<==>)",
      "beginCaptures": {
        "1": { "name": "constant.language" },
        "2": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#type-expression" },
        {
          "match": "(\\?)",
          "captures": {
            "1": { "name": "keyword.other" }
          }
        }
      ]
    },
    "type-expression-object": {
      "comment": "FIXME: separate sub-rules",
      "begin": "(<)",
      "end": "(>)",
      "captures": {
        "1": { "name": "entity.name.function" }
      },
      "patterns": [
        {
          "begin": "(\\.\\.)",
          "end": "(?=>)",
          "beginCaptures": {
            "1": { "name": "constant.language" }
          }
        },
        {
          "comment": "FIXME: method item",
          "begin": "(?=[_[:lower:]])",
          "end": "(,)|(?=>)",
          "endCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "comment": "FIXME: method name",
              "begin": "(?=[_[:lower:]])",
              "end": "(?=:)",
              "patterns": [
                {
                  "match": "\\b([_[:lower:]][[:word:]]*)\\b",
                  "captures": {
                    "1": { "name": "constant.language" }
                  }
                }
              ]
            },
            {
              "comment": "FIXME: method type",
              "begin": "(:)",
              "end": "(?=[,>])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#type-expression" }
              ]
            }
          ]
        }
      ]
    },
    "type-expression-parens": {
      "comment": "FIXME: proper tuple types",
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\b(module)\\b",
          "end": "(?=[\\)])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#module-path-extended" },
            { "include": "#signature-expression-constraints" }
          ]
        },
        {
          "match": ",",
          "name": "keyword.other"
        },
        { "include": "#type-expression" }
      ]
    },
    "type-expression-polymorphic-variant": {
      "comment": "FIXME: proper parsing",
      "begin": "(\\[)",
      "end": "(\\])",
      "captures": {
        "1": { "name": "entity.name.function" }
      },
      "patterns": [
        {
          "match": "[<>|]|\\b(of)\\b",
          "name": "keyword.other"
        },
        { "include": "#value-expression-literal-constructor-variant-polymorphic" },
        { "include": "#type-expression" }
      ]
    },
    "type-expression-record": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#type-expression-record-item" }
      ]
    },
    "type-expression-record-field": {
      "comment": "FIXME: proper chaining with mutable, …",
      "begin": "(\\bmutable\\b)?[[:space:]]*(?!\\bmutable\\b)\\b([_[:lower:]][[:word:]]*)\\b",
      "end": "(?:(,)|(?=\\}))",
      "beginCaptures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "constant.language.field.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "(:)",
          "end": "(?=[,\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#type-expression" }
          ]
        }
      ]
    },
    "type-expression-record-item": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-prefix-simple" },
        { "include": "#type-expression-record-field" }
      ]
    },
    "type-expression-variable": {
      "match": "'([_[:lower:]][[:word:]]*)\\b(?!\\.[[:upper:]])",
      "captures": {
        "1": { "name": "parameter.variable" }
      }
    },
    "value-expression": {
      "patterns": [
        { "include": "#attribute" },
        { "include": "#comment" },
        { "include": "#extension-node" },
        { "include": "#jsx" },
        { "include": "#operator" },
        { "include": "#value-expression-builtin" },
        { "include": "#value-expression-if-then-else" },
        { "include": "#value-expression-atomic" },
        { "include": "#module-prefix-simple" },
        {
          "match": "[:?]",
          "name": "keyword.other"
        },
        { "include": "#value-expression-record-path" }
      ]
    },
    "value-expression-atomic": {
      "patterns": [
        { "include": "#value-expression-literal" },
        { "include": "#value-expression-literal-list" },
        { "include": "#value-expression-for" },
        { "include": "#value-expression-fun" },
        { "include": "#value-expression-block-or-record-or-object" },
        { "include": "#value-expression-label" },
        { "include": "#value-expression-parens" },
        { "include": "#value-expression-switch" },
        { "include": "#value-expression-try" },
        { "include": "#value-expression-while" }
      ]
    },
    "value-expression-block": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-block-item" }
      ]
    },
    "value-expression-block-item": {
      "patterns": [
        { "include": "#module-item-let" },
        { "include": "#module-item-open" },
        { "include": "#value-expression" }
      ]
    },
    "value-expression-block-look": {
      "begin": "(?![[:space:]]*($|\\.\\.\\.|([[:upper:]][[:word:]]*\\.)*([[:lower:]][[:word:]]*)[[:space:]]*(?:,|:(?![=]))))",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#value-expression-block-item" }
      ]
    },
    "value-expression-block-or-record-or-object": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-prefix-simple" },
        { "include": "#value-expression-object-look" },
        { "include": "#value-expression-record-look" },
        { "include": "#value-expression-block-look" }
      ]
    },
    "value-expression-builtin": {
      "name": "keyword.other",
      "match": "\\b(assert|decr|failwith|fprintf|incr|lazy|lor|lsl|lsr|lxor|mod|new|not|printf|raise|ref)\\b"
    },
    "value-expression-for": {
      "begin": "(?=\\b(for)\\b)",
      "end": "(?<=[\\}])",
      "patterns": [
        { "include": "#value-expression-for-head" },
        { "include": "#value-expression-block" }
      ]
    },
    "value-expression-for-head": {
      "begin": "(?=\\b(for)\\b)",
      "end": "(?=[\\{])",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        {
          "begin": "\\b(for)\\b",
          "end": "(?=\\b(in)\\b)",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#comment" },
            { "include": "#pattern-variable" }
          ]
        },
        {
          "begin": "\\b(in)\\b",
          "end": "(?=(down)?to)",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        },
        {
          "begin": "\\b((down)?to)\\b",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        }
      ]
    },
    "value-expression-fun": {
      "begin": "\\b(fun)\\b",
      "end": "(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression-fun-pattern-match-rule" }
      ]
    },
    "value-expression-fun-pattern-match-rule": {
      "begin": "(\\|(?!\\|))?",
      "end": "(?=[;\\)\\}]|\\|(?!\\|)|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression-fun-pattern-match-rule-lhs" },
        { "include": "#value-expression-fun-pattern-match-rule-rhs" }
      ]
    },
    "value-expression-fun-pattern-match-rule-lhs": {
      "begin": "(?<=fun)|(?<=[^\\|][\\|])",
      "end": "(?==>)|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#module-item-let-value-param" }
      ]
    },
    "value-expression-fun-pattern-match-rule-rhs": {
      "begin": "(=>)",
      "end": "(?=[;\\)\\}]|\\|(?!\\|)|\\b(and)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "value-expression-if-then-else": {
      "begin": "\\b(if)\\b",
      "end": "(?=[;\\)\\]\\}])",
      "applyEndPatternLast": true,
      "beginCaptures": {
        "1": { "name": "keyword.control" }
      },
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "\\b(else)\\b",
          "end": "(?=[;\\)\\]\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        },
        { "include": "#value-expression-atomic" },
        { "include": "#value-expression-record-path" }
      ]
    },
    "value-expression-lazy": {
      "comment": "FIXME",
      "match": "\\b(lazy)\\b",
      "captures": {
        "1": { "name": "keyword.other" }
      }
    },
    "value-expression-label": {
      "begin": "\\b([_[:lower:]][[:word:]]*)\\b[[:space:]]*(::)(\\?)?",
      "end": "(?![[:space:]])",
      "beginCaptures": {
        "1": { "name": "constant.language" },
        "2": { "name": "keyword.other" },
        "3": { "name": "storage.type" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "value-expression-literal": {
      "patterns": [
        { "include": "#value-expression-literal-boolean" },
        { "include": "#value-expression-literal-char" },
        { "include": "#value-expression-literal-constructor-variant" },
        { "include": "#value-expression-literal-constructor-variant-polymorphic" },
        { "include": "#value-expression-lazy" },
        { "include": "#value-expression-literal-numeric" },
        { "include": "#value-expression-literal-string" },
        { "include": "#value-expression-literal-unit" }
      ]
    },
    "value-expression-literal-boolean": {
      "name": "constant.language.boolean.reason",
      "match": "\\b(false|true)\\b"
    },
    "value-expression-literal-char": {
      "match": "'([[:graph:]]|\\\\[\\\\\"'ntbr ]|\\\\[0-9][0-9][0-9]|\\\\x[0-9A-Fa-f][0-9A-Fa-f]|\\\\o[0-3][0-7][0-7])'",
      "name": "constant.character"
    },
    "value-expression-literal-constructor-variant": {
      "match": "\\b([[:upper:]][[:word:]]*)\\b(?![[:space:]]*[\\.])",
      "captures": {
        "1": { "name": "constant.language.reason" }
      }
    },
    "value-expression-literal-constructor-variant-polymorphic": {
      "match": "(`)([[:alpha:]][[:word:]]*)\\b(?!\\.)",
      "captures": {
        "1": { "name": "variable.parameter" },
        "2": { "name": "constant.language.reason" }
      }
    },
    "value-expression-literal-list": {
      "begin": "(\\[)(?![@%])",
      "end": "(\\])",
      "beginCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "endCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "patterns": [
        { "include": "#value-expression-literal-list-separator" },
        { "include": "#value-expression" },
        { "include": "#value-expression-literal-list" }
      ]
    },
    "value-expression-literal-list-separator": {
      "match": "(,)|(\\.\\.\\.)",
      "captures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "constant.language" }
      }
    },
    "value-expression-literal-numeric": {
      "patterns": [
        {
          "match": "([-])?([0-9][_0-9]*)(?:(\\.)([_0-9]*))?(?:([eE])([\\-\\+])?([0-9][_0-9]*))?(?![xX])",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "constant.language" },
            "3": { "name": "keyword.other" },
            "4": { "name": "constant.language" },
            "5": { "name": "keyword.other" },
            "6": { "name": "keyword.other" },
            "7": { "name": "constant.language" }
          }
        },
        {
          "match": "([-])?(0[xX])([0-9A-Fa-f][_0-9A-Fa-f]*)(?:(\\.)([_0-9A-Fa-f]*))?(?:([pP])([\\-\\+])?([0-9][_0-9]*))?",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "keyword.other" },
            "3": { "name": "constant.language" },
            "4": { "name": "keyword.other" },
            "5": { "name": "constant.language" },
            "6": { "name": "keyword.other" },
            "7": { "name": "keyword.other" },
            "8": { "name": "constant.language" }
          }
        },
        {
          "match": "([-])?(0[oO])([0-7][_0-7]*)",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "keyword.other" },
            "3": { "name": "constant.language" }
          }
        },
        {
          "match": "([-])?(0[bB])([0-1][_0-1]*)",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "keyword.other" },
            "3": { "name": "constant.language" }
          }
        }
      ]
    },
    "value-expression-literal-string": {
			"name": "string.double.reason",
			"begin": "\"",
			"end": "\"|(?:[^\\\\\\n]$)",
      "patterns": [
        {
          "comment": "FIXME: make escapes into separate rule",
          "match": "\\\\[\\\\\"'ntbr ]|\\\\[0-9][0-9][0-9]|\\\\x[0-9A-Fa-f][0-9A-Fa-f]|\\\\o[0-3][0-7][0-7]",
          "name": "constant.character"
        },
        {
          "match": "(@)([ \\[\\],.]|\\\\n)",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "constant.language" }
          }
        },
        {
          "match": "(%)\\b(identity)\\b",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "constant.language" }
          }
        },
        {
          "comment": "FIXME: don't highlight in external strings",
          "match": "(%)([ads])?",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "variable.parameter" }
          }
        }
      ]
    },
    "value-expression-literal-unit": {
      "match": "\\(\\)",
      "name": "constant.language.unit.reason"
    },
    "value-expression-object-look": {
      "comment": "FIXME: is there a better way than listing all the keywords?",
      "begin": "(?:\\G|^)[[:space:]]*(?=method)",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#object-item" }
      ]
    },
    "value-expression-parens": {
      "begin": "(?=\\()",
      "end": "\\)|(?=[;\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b)",
      "patterns": [
        { "include": "#condition-lhs" },
        { "include": "#value-expression-parens-lhs" },
        { "include": "#type-annotation-rhs" }
      ]
    },
    "value-expression-parens-lhs": {
      "begin": "(?:\\(|(,))",
      "end": "(?=(?:[?,:\\)]|\\b(and|as|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|val|with)\\b))",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "\\b(module)\\b",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#module-path-simple" }
          ]
        },
        { "include": "#value-expression" }
      ]
    },
    "value-expression-record": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-record-item" }
      ]
    },
    "value-expression-record-field": {
      "patterns": [
        {
          "begin": "(\\.\\.\\.)",
          "end": "(,)|(?=\\})",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "endCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#comment" },
            { "include": "#module-prefix-simple" },
            {
              "match": "\\b[[:lower:]][[:word:]]*\\b",
              "name": "constant.language"
            },
            {
              "begin": "(:)",
              "end": "(?=[,\\}])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#value-expression" }
              ]
            }
          ]
        },
        {
          "begin": "\\b[[:upper:]][[:word:]]*\\b",
          "end": "(,)|(?=\\})",
          "beginCaptures": {
            "1": { "name": "entity.name.class" }
          },
          "endCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#module-prefix-simple" },
            {
              "begin": "(:)",
              "end": "(?=[,\\}])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#value-expression" }
              ]
            }
          ]
        },
        {
          "begin": "\\b([[:lower:]][[:word:]]*)\\b",
          "end": "(,)|(?=\\})",
          "beginCaptures": {
            "1": { "name": "constant.language" }
          },
          "endCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(:)",
              "end": "(?=[,\\}])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#value-expression" }
              ]
            }
          ]
        }
      ]
    },
    "value-expression-record-item": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-prefix-simple" },
        { "include": "#value-expression-record-field" }
      ]
    },
    "value-expression-record-path": {
      "begin": "\\b[[:lower:]][[:word:]]*\\b",
      "end": "(?=[^[:space:]\\.])(?!/\\*)",
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-record-suffix" }
      ]
    },
    "value-expression-record-suffix": {
      "begin": "(\\.)",
      "end": "(\\))|\\b([[:upper:]][[:word:]]*)\\b|\\b([[:lower:]][[:word:]]*)\\b|(?=[;\\)\\}]|\\b(and|class|constraint|exception|external|include|inherit|let|method|module|nonrec|open|private|rec|type|with)\\b)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "entity.name.function" },
        "2": { "name": "entity.name.class" },
        "3": { "name": "constant.language" }
      },
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "([\\(])",
          "end": "(?=[\\)])",
          "beginCaptures": {
            "1": { "name": "entity.name.function" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "match": "\\b([[:lower:]][[:word:]]*)\\b(?=[^\\)]*([\\.]))",
              "captures": {
                "1": { "name": "constant.language" },
                "2": { "name": "keyword.other" }
              }
            },
            {
              "match": "([\\.])",
              "name": "keyword.other"
            },
            {
              "match": "\\b([[:lower:]][[:word:]]*)\\b[[:space:]]*",
              "captures": {
                "1": { "name": "variable.parameter" }
              }
            }
          ]
        }
      ]
    },
    "value-expression-switch": {
      "begin": "\\b(switch)\\b",
      "end": "(?<=[\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-switch-head" },
        { "include": "#value-expression-switch-body" }
      ]
    },
    "value-expression-switch-head": {
      "begin": "(?<=switch)[[:space:]]*+",
      "end": "(?=[\\{])",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        { "include": "#value-expression-atomic" },
        { "include": "#value-expression-record-path" }
      ]
    },
    "value-expression-switch-body": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-switch-pattern-match-rule" }
      ]
    },
    "value-expression-switch-pattern-match-rule": {
      "patterns": [
        { "include": "#value-expression-switch-pattern-match-rule-lhs" },
        { "include": "#value-expression-switch-pattern-match-rule-rhs" }
      ]
    },
    "value-expression-switch-pattern-match-rule-lhs": {
      "begin": "(\\|)(?!\\|)",
      "end": "(?==>|[;\\)\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#pattern-guard" },
        { "include": "#pattern" }
      ]
    },
    "value-expression-switch-pattern-match-rule-rhs": {
      "begin": "(=>)",
      "end": "(?=[\\}]|\\|(?!\\|))",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression-block-item" }
      ]
    },
    "value-expression-try": {
      "begin": "\\b(try)\\b",
      "end": "(?<=[\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-try-head" },
        { "include": "#value-expression-switch-body" }
      ]
    },
    "value-expression-try-head": {
      "begin": "(?<=try)[[:space:]]*+",
      "end": "(?=[\\{])",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        { "include": "#value-expression-atomic" },
        { "include": "#value-expression-record-path" }
      ]
    },
    "value-expression-while": {
      "begin": "\\b(while)\\b",
      "end": "(?<=[\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression-while-head" },
        { "include": "#value-expression-block" }
      ]
    },
    "value-expression-while-head": {
      "begin": "(?<=while)[[:space:]]*+",
      "end": "(?=[\\{])",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-atomic" }
      ]
    },
    "value-expression-record-look": {
      "begin": "(?=\\.\\.\\.|([[:upper:]][[:word:]]*\\.)*([[:lower:]][[:word:]]*)[[:space:]]*[,:\\}])",
      "end": "(?=[\\}])",
      "patterns": [
        { "include": "#value-expression-record-item" }
      ]
    }
  }
}
