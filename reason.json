{
  "scopeName": "source.reason",
  "fileTypes": [
    "re",
    "rei"
  ],
  "patterns": [
    { "include": "#module-expression-block-item" }
  ],
  "repository": {
    "attribute": {
      "begin": "(?=\\[(@{1,3})[[:space:]]*[A-Za-z])",
      "end": "\\]",
      "patterns": [
        {
          "begin": "\\[(@{1,3})",
          "end": "(?=[^_\\.'0-9A-Za-z])",
          "applyEndPatternLast": "on",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#attribute-identifier" }
          ]
        },
        {
          "begin": "(:)",
          "end": "(?=\\])",
          "beginCaptures": {
            "1": { "name": "keyword.operator" }
          },
          "patterns": [
            { "include": "#type-expression" }
          ]
        },
        {
          "begin": "",
          "end": "(?=\\])",
          "patterns": [
            {
              "comment": "FIXME: should be module-items",
              "include": "#value-expression"
            }
          ]
        }
      ]
    },
    "attribute-identifier": {
      "patterns": [
        {
          "match": "\\b([A-Za-z][_'0-9A-Za-z]*)\\b[[:space:]]*(?:(\\.))",
          "captures": {
            "1": { "name": "entity.name.class" },
            "2": { "name": "keyword.operator" }
          }
        },
        {
          "name": "constant.language",
          "match": "\\b([A-Za-z][_'0-9A-Za-z]*)\\b"
        }
      ]
    },
    "class-item-inherit": {
      "begin": "\\b(inherit)\\b",
      "end": "(;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "class-item-method": {
      "begin": "\\b(method)\\b",
      "end": "(;)|(?=[\\}])",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
		"comment": {
			"name": "comment.ts",
			"patterns": [
				{ "include": "#comment-block-doc" },
				{	"include": "#comment-block"	}
			]
		},
		"comment-block": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.reason"
		},
		"comment-block-doc": {
			"begin": "/\\*\\*(?!/)",
			"end": "\\*/",
			"name": "comment.block.documentation.reason"
		},
    "extension-node": {
      "begin": "(?=\\[(%{1,3})[[:space:]]*[A-Za-z])",
      "end": "\\]",
      "patterns": [
        {
          "begin": "\\[(%{1,3})",
          "end": "(?=[^_\\.'0-9A-Za-z])",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#attribute-identifier" }
          ]
        },
        {
          "begin": "(:)",
          "end": "(?=\\])",
          "beginCaptures": {
            "1": { "name": "keyword.operator" }
          },
          "patterns": [
            { "include": "#type-expression" }
          ]
        }
      ]
    },
    "module-expression": {
      "patterns": [
        {
          "patterns": [
            { "include": "#module-expression-path" },
            {
              "match": "\\b([A-Z][_'0-9A-Za-z]*)\\b",
              "captures": {
                "1": { "name": "name.entity.class" }
              }
            }
          ]
        },
        { "include": "#module-expression-block" }
      ]
    },
    "module-expression-block": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#module-expression-block-item" }
      ]
    },
    "module-expression-block-item": {
      "begin": "(?:\\G|^|(;))",
      "end": "(?=[;\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#attribute" },
        { "include": "#comment" },
        { "include": "#module-item-include" },
        { "include": "#module-item-let" },
        { "include": "#module-item-class-type" },
        { "include": "#module-item-module-type" },
        { "include": "#module-item-module" },
        { "include": "#module-item-open" },
        { "include": "#module-item-type" }
      ]
    },
    "module-expression-path": {
      "match": "\\b([A-Z][_'0-9A-Za-z]*)\\b[[:space:]]*(\\.)",
      "captures": {
        "1": { "name": "entity.name.class" },
        "2": { "name": "keyword.operator" }
      }
    },
    "module-item-class-type": {
      "comment": "FIXME: proper parsing",
      "begin": "\\b(class)\\b",
      "end": "(;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "(?:\\G|^)[[:space:]]*\\b(type)\\b",
          "end": "(?==)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#module-item-type-bind-name-tyvars" }
          ]
        },
        {
          "begin": "(=)",
          "end": "(?=;)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#attribute" },
            { "include": "#comment" },
            { "include": "#class-item-inherit" },
            { "include": "#class-item-method" }
          ]
        }
      ]
    },
    "module-item-include": {
      "begin": "\\b(include)\\b",
      "end": "(;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-expression" }
      ]
    },
    "module-item-let": {
      "comment": "FIXME: move external to separate rule",
      "begin": "\\b(external|let)\\b",
      "end": "(;)|(?=[\\}])",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#module-item-let-module" },
        { "include": "#module-item-let-value" }
      ]
    },
    "module-item-let-module": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(module)\\b",
      "end": "(?=[;\\}])",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-module-and" },
        { "include": "#module-item-let-module-rec" },
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-let-module-and": {
      "begin": "\\b(and)\\b",
      "end": "(?=\\band\\b|[;\\}])",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-let-module-bind-body": {
      "begin": "(=>?)",
      "end": "(?=\\band\\b|[;\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#module-expression" }
      ]
    },
    "module-item-let-module-bind-name-params": {
      "begin": "\\b([A-Z][_'0-9A-Za-z]*)\\b",
      "end": "(?=[:=])",
      "beginCaptures": {
        "1": { "name": "entity.name.class" }
      },
      "patterns": [
        { "include": "#module-item-let-module-param" }
      ]
    },
    "module-item-let-module-bind-name-params-type-body": {
      "begin": "(?:\\G|^)",
      "end": "(?=\\band\\b|[;\\}])",
      "patterns": [
        { "include": "#module-item-let-module-bind-name-params" },
        { "include": "#module-item-let-module-bind-type" },
        { "include": "#module-item-let-module-bind-body" }
      ]
    },
    "module-item-let-module-bind-type": {
      "begin": "(:)",
      "end": "(?=\\band\\b|[;\\}=])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#module-expression" }
      ]
    },
    "module-item-let-module-param": {
      "patterns": [
      ]
    },
    "module-item-let-module-rec": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(rec)\\b",
      "end": "(?=\\band\\b|[;\\}])",
      "beginCaptures": {
        "1": { "name": "storage.modifier.rec.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-let-value": {
      "patterns": [
        { "include": "#module-item-let-value-and" },
        { "include": "#module-item-let-value-rec" },
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
    "module-item-let-value-and": {
      "begin": "\\b(and)\\b",
      "end": "(?=\\band\\b|[;\\}])",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
    "module-item-let-value-bind-body": {
      "begin": "(=>?)",
      "end": "(?=\\band\\b|[;\\)\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "module-item-let-value-bind-name-params": {
      "begin": "(?:\\G|^)[[:space:]]*(?!\\blazy\\b)(?:\\b([_][_'0-9A-Za-z]+)\\b|\\b([a-z][_'0-9A-Za-z]+)\\b)",
      "end": "(?<!:)(?!::)(?=[:=])",
      "beginCaptures": {
        "1": { "name": "comment.line" },
        "2": { "name": "entity.name.function" }
      },
      "patterns": [
        { "include": "#module-item-let-value-param" }
      ]
    },
    "module-item-let-value-bind-name-params-type-body": {
      "begin": "(?!\\bmodule|rec\\b)",
      "end": "(?=\\band\\b|[;\\}])",
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params" },
        { "include": "#module-item-let-value-bind-pattern" },
        { "include": "#module-item-let-value-bind-type" },
        { "include": "#module-item-let-value-bind-body" }
      ]
    },
    "module-item-let-value-bind-parens-params": {
      "begin": "(?=\\()",
      "end": "(?!::)(?=[:=])",
      "patterns": [
        {
          "begin": "\\G\\(",
          "end": "\\)",
          "patterns": [
            { "include": "#operator-infix-custom" },
            { "include": "#pattern" },
            { "include": "#pattern-parens-lhs" },
            { "include": "#pattern-parens-rhs" }
          ]
        },
        { "include": "#module-item-let-value-param" }
      ]
    },
    "module-item-let-value-bind-pattern": {
      "begin": "",
      "end": "(?==)",
      "patterns": [
        { "include": "#module-item-let-value-bind-parens-params" },
        { "include": "#pattern" }
      ]
    },
    "module-item-let-value-bind-type": {
      "comment": "FIXME: lookahead",
      "begin": "(:)",
      "end": "(?=\\band\\b|[;\\}]|=(?!>))",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#type-expression" }
      ]
    },
    "module-item-let-value-param": {
      "patterns": [
        { "include": "#module-item-let-value-param-label" },
        { "include": "#module-item-let-value-param-type" },
        { "include": "#module-item-let-value-param-module" },
        { "include": "#pattern" }
      ]
    },
    "module-item-let-value-param-label": {
      "patterns": [
        {
          "begin": "\\b([a-z][_'0-9A-Za-z]*)\\b(::)",
          "end": "(?<=[[:space:]])",
          "beginCaptures": {
            "1": { "name": "constant.language" },
            "2": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#pattern" },
            {
              "begin": "(=)",
              "end": "(\\?)|(?=[[:space:]])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "endCaptures": {
                "1": { "name": "storage.type" }
              },
              "patterns": [
                { "include": "#value-expression" }
              ]
            }
          ]
        }
      ]
    },
    "module-item-let-value-param-module": {
      "comment": "FIXME: merge with pattern-parens",
      "begin": "\\([[:space:]]*(?=\\bmodule\\b)",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\b(module)\\b",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "name": "entity.name.class",
              "match": "\\b[A-Z][_'0-9A-Za-z]*\\b"
            }
          ]
        }
      ]
    },
    "module-item-let-value-param-type": {
      "comment": "FIXME: merge with pattern-parens",
      "begin": "\\((?=\\btype\\b)",
      "end": "\\)",
      "patterns": [
        {
          "begin": "\\b(type)\\b",
          "end": "(?=\\))",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "name": "support.type",
              "match": "\\b[a-z][_'0-9A-Za-z]*\\b"
            }
          ]
        }
      ]
    },
    "module-item-let-value-rec": {
      "begin": "\\b(rec)\\b",
      "end": "(?=\\band\\b|[;\\}])",
      "beginCaptures": {
        "1": { "name": "storage.modifier.rec.reason" }
      },
      "patterns": [
        { "include": "#module-item-let-value-bind-name-params-type-body" }
      ]
    },
    "module-item-module": {
      "comment": "NOTE: this is to support the let-module case without the let prefix",
      "begin": "\\b(module)\\b[[:space:]]*(?!\\btype\\b|$)",
      "end": "(;)",
      "beginCaptures": {
        "1": { "name": "storage.type.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#module-item-let-module-and" },
        { "include": "#module-item-let-module-rec" },
        { "include": "#module-item-let-module-bind-name-params-type-body" }
      ]
    },
    "module-item-module-type": {
      "begin": "\\b(module)\\b[[:space:]]*(?=\\btype\\b|$)",
      "end": "(;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "(?:\\G|^)[[:space:]]*\\b(type)\\b",
          "end": "(?==)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#comment" },
            {
              "match": "([A-Z][_'0-9A-Za-z]*)",
              "captures": {
                "1": { "name": "entity.name.class" }
              }
            }
          ]
        },
        {
          "begin": "(=)",
          "end": "(?=;)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#comment" },
            { "include": "#module-expression" }
          ]
        }
      ]
    },
    "module-item-open": {
      "begin": "\\b(open)\\b",
      "end": "(;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-expression-path" },
        {
          "match": "[A-Z][_'0-9A-Za-z]*",
          "name": "entity.name.class"
        }
      ]
    },
    "module-item-type": {
      "comment": "FIXME: the semi-colon is optional so we can re-use this for hover, which does not print the trailing ;",
      "begin": "\\b(type)\\b",
      "end": "(;)?",
      "applyEndPatternLast": "on",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#module-item-type-and" },
        { "include": "#module-item-type-constraint" },
        { "include": "#module-item-type-bind" }
      ]
    },
    "module-item-type-and": {
      "begin": "\\b(and)\\b",
      "end": "(?=\\band\\b|;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#module-item-type-bind-name-tyvars-body" }
      ]
    },
    "module-item-type-bind": {
      "comment": "FIXME: only allow module paths before type variables",
      "patterns": [
        { "include": "#module-item-type-bind-nonrec" },
        { "include": "#module-item-type-bind-name-tyvars-body" }
      ]
    },
    "module-item-type-bind-body": {
      "comment": "FIXME: parsing",
      "begin": "(\\+?=)",
      "end": "(?=\\b(and|constraint)\\b|;)",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        {
          "comment": "FIXME: add separate rule; parsing",
          "match": "(?:\\G|^)[[:space:]]*\\b(private)\\b",
          "captures": {
            "1": { "name": "keyword.other" }
          }
        },
        {
          "comment": "FIXME: remove this once the pretty printer no longer outputs 'of'",
          "match": "[:|]|\\bof\\b",
          "name": "keyword.other"
        },
        { "include": "#type-expression" },
        {
          "begin": "(\\.\\.)",
          "end": "(?=;)",
          "beginCaptures": {
            "1": { "name": "keyword.other" }
          }
        },
        { "include": "#value-expression-literal-constructor-variant" }
      ]
    },
    "module-item-type-bind-nonrec": {
      "begin": "(?:\\G|^)[[:space:]]*\\b(nonrec)\\b",
      "end": "(?=\\band\\b|;)",
      "beginCaptures": {
        "1": { "name": "storage.modifier.nonrec.reason" }
      },
      "patterns": [
        { "include": "#module-item-type-bind-name-tyvars-body" }
      ]
    },
    "module-item-type-bind-name-tyvars": {
      "begin": "(?<=\\G|^|\\.)[[:space:]]*\\b([a-z][_'0-9A-Za-z]*)\\b",
      "end": "(?=;|\\+?=)",
      "beginCaptures": {
        "1": { "name": "entity.name.function" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#attribute" },
        {
          "match": "_",
          "name": "comment.line"
        },
        {
          "comment": "FIXME: add separate type-variable rule",
          "match": "([+\\-])?'(?:([_])\\b|([a-z][_'0-9A-Za-z]*)\\b)(?!\\.[A-Z])",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "comment.line" },
            "3": { "name": "variable.parameter" }
          }
        }
      ]
    },
    "module-item-type-bind-name-tyvars-body": {
      "begin": "(?=(\\G|^)[[:space:]]*\\b[A-Za-z])",
      "end": "(?=\\b(and|constraint)\\b|;)",
      "patterns": [
        { "include": "#module-expression-path" },
        { "include": "#module-item-type-bind-name-tyvars" },
        { "include": "#module-item-type-bind-body" }
      ]
    },
    "module-item-type-constraint": {
      "comment": "FIXME: proper parsing",
      "begin": "\\b(constraint)\\b",
      "end": "(?=\\b(and|constraint)\\b|;)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "comment": "FIXME: add separate type-variable rule",
          "match": "([+\\-])?'([_a-z][_'0-9A-Za-z]*)\\b(?!\\.[A-Z])",
          "captures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "variable.parameter" }
          }
        },
        {
          "match": "=",
          "name": "keyword.other"
        },
        { "include": "#type-expression" }
      ]
    },
    "pattern": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-expression-path" },
        {
          "comment": "FIXME",
          "match": "\\b(lazy)\\b",
          "captures": {
            "1": { "name": "keyword.other" }
          }
        },
        { "include": "#pattern-parens" },
        { "include": "#pattern-atomic" }
      ]
    },
    "pattern-atomic": {
      "patterns": [
        { "include": "#value-expression-literal" },
        { "include": "#pattern-list" },
        { "include": "#pattern-record" },
        { "include": "#pattern-variable" }
      ]
    },
    "pattern-guard": {
      "begin": "\\b(when)\\b",
      "end": "(?==>)",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "pattern-list": {
      "begin": "(\\[)(?![@%])",
      "end": "(\\])",
      "beginCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "endCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "patterns": [
        { "include": "#value-expression-literal-list-seperator" },
        { "include": "#pattern" }
      ]
    },
    "pattern-parens": {
      "begin": "(?=\\()",
      "end": "\\)",
      "patterns": [
        { "include": "#pattern-parens-lhs" },
        { "include": "#pattern-parens-rhs" }
      ]
    },
    "pattern-parens-lhs": {
      "begin": "(?:\\(|(,))",
      "end": "(?=(?:[,:\\)]|\\bas\\b))",
      "beginCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#pattern" }
      ]
    },
    "pattern-parens-rhs": {
      "patterns": [
        { "include": "#pattern-parens-rhs-alias" },
        { "include": "#pattern-parens-rhs-type" }
      ]
    },
    "pattern-parens-rhs-alias": {
      "begin": "\\b(as)\\b",
      "end": "(?=[,\\)])",
      "beginCaptures": {
        "1": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#pattern-variable" }
      ]
    },
    "pattern-parens-rhs-type": {
      "begin": "(:)",
      "end": "(?=\\))",
      "beginCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#type-expression" }
      ]
    },
    "pattern-record": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#comment" },
        { "include": "#pattern-record-item" }
      ]
    },
    "pattern-record-field": {
      "begin": "\\b([_][_'0-9A-Za-z]*)\\b|\\b([a-z][_'0-9A-Za-z]*)\\b",
      "end": "(?:(,)|(?=\\}))",
      "beginCaptures": {
        "1": { "name": "comment.line" },
        "2": { "name": "constant.language.field.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "\\G(:)",
          "end": "(?=[,\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.operator.reason" }
          },
          "patterns": [
            { "include": "#pattern" }
          ]
        }
      ]
    },
    "pattern-record-item": {
      "patterns": [
        { "include": "#module-expression-path" },
        { "include": "#pattern-record-field" }
      ]
    },
    "pattern-variable": {
      "patterns": [
        {
          "match": "\\b(_(?:[a-z][_'0-9A-Za-z]*)?)\\b(?!\\.[A-Z])",
          "captures": {
            "1": { "name": "comment.line" }
          }
        },
        {
          "match": "\\b([a-z][_'0-9A-Za-z]*)\\b(?!\\.[A-Z])",
          "captures": {
            "1": { "name": "variable.parameter" }
          }
        }
      ]
    },
    "object-item": {
      "begin": "(?:\\G|(;))",
      "end": "(?=[;\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#class-item-method" }
      ]
    },
    "operator": {
      "patterns": [
        { "include": "#operator-infix" },
        { "include": "#operator-prefix" }
      ]
    },
    "operator-infix-builtin": {
      "name": "keyword.operator",
      "match": ":="
    },
    "operator-infix": {
      "patterns": [
        { "include": "#operator-infix-builtin" },
        { "include": "#operator-infix-custom" },
        { "include": "#operator-infix-custom-hash" }
      ]
    },
    "operator-infix-custom": {
      "name": "keyword.operator",
      "match": "[\\-@*/&%^+<=>|$][\\-:!?.@*/&%^+<=>|~$\\\\]*"
    },
    "operator-infix-custom-hash": {
      "name": "keyword.operator",
      "match": "#[\\-:!?.@*/&%^+<=>|~$]+"
    },
    "operator-prefix": {
      "patterns": [
        { "include": "#operator-prefix-bang" },
        { "include": "#operator-prefix-label-token" }
      ]
    },
    "operator-prefix-bang": {
      "name": "keyword.operator",
      "match": "![\\-:!?.@*/&%^+<=>|~$]*"
    },
    "operator-prefix-label-token": {
      "name": "keyword.operator",
      "match": "[?~][\\-:!?.@*/&%^+<=>|~$]+"
    },
    "type-expression": {
      "comments": "FIXME: higher-rank, objects, poly-variants, etc.",
      "patterns": [
        { "include": "#attribute" },
        { "include": "#comment" },
        { "include": "#module-expression-path" },
        { "include": "#type-expression-label" },
        { "include": "#type-expression-arrow" },
        { "include": "#type-expression-constructor" },
        { "include": "#type-expression-object" },
        { "include": "#type-expression-parens" },
        { "include": "#type-expression-polymorphic-variant" },
        { "include": "#type-expression-record" },
        { "include": "#type-expression-variable" }
      ]
    },
    "type-expression-arrow": {
      "name": "keyword.operator",
      "match": "=>"
    },
    "type-expression-constructor": {
      "match": "(_)(?![0-9A-Za-z])|\\b([_a-z][_'0-9A-Za-z]*)\\b(?!\\.[A-Z])",
      "captures": {
        "1": { "name": "variable.parameter" },
        "2": { "name": "support.type" }
      }
    },
    "type-expression-label": {
      "begin": "\\b([_a-z][_'0-9A-Za-z]*)\\b(::)",
      "end": "(?<==>)",
      "beginCaptures": {
        "1": { "name": "constant.language" },
        "2": { "name": "keyword.other" }
      },
      "patterns": [
        { "include": "#type-expression" },
        {
          "match": "(\\?)",
          "captures": {
            "1": { "name": "keyword.other" }
          }
        }
      ]
    },
    "type-expression-object": {
      "comment": "FIXME: separate sub-rules",
      "begin": "(<)",
      "end": "(>)",
      "captures": {
        "1": { "name": "entity.name.function" }
      },
      "patterns": [
        {
          "begin": "(\\.\\.)",
          "end": "(?=>)",
          "beginCaptures": {
            "1": { "name": "constant.language" }
          }
        },
        {
          "comment": "FIXME: method item",
          "begin": "(?=[_a-z])",
          "end": "(,)|(?=>)",
          "endCaptures": {
            "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "comment": "FIXME: method name",
              "begin": "(?=[_a-z])",
              "end": "(?=:)",
              "patterns": [
                {
                  "match": "\\b([_a-z][_'0-9A-Za-z]*)\\b",
                  "captures": {
                    "1": { "name": "constant.language" }
                  }
                }
              ]
            },
            {
              "comment": "FIXME: method type",
              "begin": "(:)",
              "end": "(?=[,>])",
              "beginCaptures": {
                "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#type-expression" }
              ]
            }
          ]
        }
      ]
    },
    "type-expression-parens": {
      "comment": "FIXME: proper tuple types",
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "match": ",",
          "name": "keyword.other"
        },
        { "include": "#type-expression" }
      ]
    },
    "type-expression-polymorphic-variant": {
      "comment": "FIXME: proper parsing",
      "begin": "(\\[)",
      "end": "(\\])",
      "captures": {
        "1": { "name": "entity.name.function" }
      },
      "patterns": [
        {
          "match": "[<>|]|\\bof\\b",
          "name": "keyword.other"
        },
        { "include": "#value-expression-literal-constructor-variant-polymorphic" },
        { "include": "#type-expression" }
      ]
    },
    "type-expression-record": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#type-expression-record-item" }
      ]
    },
    "type-expression-record-field": {
      "comment": "FIXME: proper chaining with mutable, …",
      "begin": "(\\bmutable\\b)?[[:space:]]*(?!\\bmutable\\b)\\b([_a-z][_'0-9A-Za-z]*)\\b",
      "end": "(?:(,)|(?=\\}))",
      "beginCaptures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "constant.language.field.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "(:)",
          "end": "(?=[,\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.operator.reason" }
          },
          "patterns": [
            { "include": "#type-expression" }
          ]
        }
      ]
    },
    "type-expression-record-item": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-expression-path" },
        { "include": "#type-expression-record-field" }
      ]
    },
    "type-expression-variable": {
      "match": "'([_a-z][_'0-9A-Za-z]*)\\b(?!\\.[A-Z])",
      "captures": {
        "1": { "name": "parameter.variable" }
      }
    },
    "value-expression": {
      "patterns": [
        { "include": "#attribute" },
        { "include": "#comment" },
        { "include": "#extension-node" },
        { "include": "#module-expression-path" },
        { "include": "#operator" },
        { "include": "#value-expression-builtin" },
        { "include": "#value-expression-if-then-else" },
        { "include": "#value-expression-atomic" },
        { "include": "#value-expression-record-path" }
      ]
    },
    "value-expression-atomic": {
      "patterns": [
        { "include": "#value-expression-literal" },
        { "include": "#value-expression-literal-list" },
        { "include": "#value-expression-for" },
        { "include": "#value-expression-fun" },
        { "include": "#value-expression-block-or-record-or-object" },
        { "include": "#value-expression-label" },
        { "include": "#value-expression-parens" },
        { "include": "#value-expression-switch" },
        { "include": "#value-expression-try" },
        { "include": "#value-expression-while" }
      ]
    },
    "value-expression-block": {
      "begin": "\\{",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#value-expression-block-item" }
      ]
    },
    "value-expression-block-item": {
      "begin": "(;)?",
      "end": "(?=[;\\}\\|])",
      "beginCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#module-item-let" },
        { "include": "#module-item-open" },
        { "include": "#value-expression" }
      ]
    },
    "value-expression-block-or-record-or-object": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#comment" },
        { "include": "#module-expression-path" },
        { "include": "#value-expression-object-look" },
        { "include": "#value-expression-record-look" },
        { "include": "#value-expression-block-look" }
      ]
    },
    "value-expression-builtin": {
      "name": "keyword.operator",
      "match": "\\b(assert|decr|failwith|fprintf|incr|lazy|lor|lsl|lsr|lxor|mod|new|not|printf|ref)\\b"
    },
    "value-expression-block-look": {
      "begin": "(?![[:space:]]*($|\\.\\.\\.|([A-Z][_'0-9A-Za-z]*\\.)*([a-z][_'0-9A-Za-z]*)[[:space:]]*[,:]))",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#value-expression-block-item" }
      ]
    },
    "value-expression-for": {
      "begin": "(?=\\bfor\\b)",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-for-head" },
        { "include": "#value-expression-block" }
      ]
    },
    "value-expression-for-head": {
      "begin": "(?=\\bfor\\b)",
      "end": "(?=\\{)",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        {
          "begin": "\\b(for)\\b",
          "end": "(?=\\bin\\b)",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#pattern-variable" }
          ]
        },
        {
          "begin": "\\b(in)\\b",
          "end": "(?=(down)?to)",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        },
        {
          "begin": "\\b((down)?to)\\b",
          "end": "(?=\\{)",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        }
      ]
    },
    "value-expression-fun": {
      "begin": "\\b(fun)\\b",
      "end": "(?=[;\\)\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#value-expression-fun-pattern-match-rule" }
      ]
    },
    "value-expression-fun-pattern-match-rule": {
      "begin": "(\\|)?",
      "end": "(?=[;\\)\\}|])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#value-expression-fun-pattern-match-rule-lhs" },
        { "include": "#value-expression-fun-pattern-match-rule-rhs" }
      ]
    },
    "value-expression-fun-pattern-match-rule-lhs": {
      "begin": "",
      "end": "(?==>)",
      "patterns": [
        { "include": "#pattern-guard" },
        { "include": "#pattern" }
      ]
    },
    "value-expression-fun-pattern-match-rule-rhs": {
      "begin": "(=>)",
      "end": "(?=[\\|\\)\\};])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "value-expression-if-then-else": {
      "begin": "\\b(if)\\b",
      "end": "(?=[;\\)\\]\\}])",
      "applyEndPatternLast": "on",
      "beginCaptures": {
        "1": { "name": "keyword.control" }
      },
      "patterns": [
        {
          "begin": "\\b(else)\\b",
          "end": "(?=[;\\)\\]\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        },
        { "include": "#value-expression-atomic" }
      ]
    },
    "value-expression-label": {
      "begin": "\\b([_a-z][_'0-9A-Za-z]*)\\b(::)(\\?)?",
      "end": "(?![[:space:]])",
      "beginCaptures": {
        "1": { "name": "constant.language" },
        "2": { "name": "keyword.other" },
        "3": { "name": "storage.type" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "value-expression-literal": {
      "patterns": [
        { "include": "#value-expression-literal-boolean" },
        { "include": "#value-expression-literal-char" },
        { "include": "#value-expression-literal-numeric" },
        { "include": "#value-expression-literal-string" },
        { "include": "#value-expression-literal-constructor-variant" },
        { "include": "#value-expression-literal-constructor-variant-polymorphic" }
      ]
    },
    "value-expression-literal-boolean": {
      "name": "constant.language.boolean.reason",
      "match": "\\b(false|true)\\b"
    },
    "value-expression-literal-char": {
			"name": "constant.character",
			"begin": "'",
			"end": "'|(?:[^\\\\\\n]$)"
    },
    "value-expression-literal-constructor-variant": {
      "match": "\\b([A-Z][_'0-9A-Za-z]*)\\b(?!\\.)",
      "captures": {
        "1": { "name": "constant.language.reason" }
      }
    },
    "value-expression-literal-constructor-variant-polymorphic": {
      "match": "(`)([A-Z][_'0-9A-Za-z]*)\\b(?!\\.)",
      "captures": {
        "1": { "name": "variable.parameter" },
        "2": { "name": "constant.language.reason" }
      }
    },
    "value-expression-literal-list": {
      "begin": "(\\[)(?![@%])",
      "end": "(\\])",
      "beginCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "endCaptures": {
        "1": { "name": "constant.language.list.reason" }
      },
      "patterns": [
        { "include": "#value-expression-literal-list-seperator" },
        { "include": "#value-expression" },
        { "include": "#value-expression-literal-list" }
      ]
    },
    "value-expression-literal-list-seperator": {
      "match": "(,)|(\\.\\.\\.)",
      "captures": {
        "1": { "name": "keyword.operator" },
        "2": { "name": "constant.language" }
      }
    },
    "value-expression-literal-numeric": {
      "name": "constant.language.numeric.reason",
      "match": "\\b(?<=[^$])((0(x|X)[0-9a-fA-F]+)|(0(o|O)[0-7]+)|(0(b|B)(0|1)+)|(([0-9]+(\\.[0-9]+)?))([eE]([+-]?)[0-9]+(\\.[0-9]+)?)?)\\b"
    },
    "value-expression-literal-string": {
			"name": "string.double.reason",
			"begin": "\"",
			"end": "\"|(?:[^\\\\\\n]$)",
      "patterns": [
        {
          "match": "(@)([ \\[\\],.]|\\\\n)",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "constant.language" }
          }
        },
        {
          "match": "(%)\\b(identity)\\b",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "constant.language" }
          }
        },
        {
          "match": "(%)([ads])?",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "variable.parameter" }
          }
        }
      ]
    },
    "value-expression-literal-unit": {
      "name": "constant.language.unit.reason",
      "match": "\\(\\)"
    },
    "value-expression-object-look": {
      "comment": "FIXME: is there a better way than listing all the keywords?",
      "begin": "(?:\\G|^)[[:space:]]*(?=method)",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#object-item" }
      ]
    },
    "value-expression-parens": {
      "begin": "(?=\\()",
      "end": "\\)",
      "patterns": [
        { "include": "#value-expression-parens-lhs" }
      ]
    },
    "value-expression-parens-lhs": {
      "begin": "(?:\\(|(,))",
      "end": "(?=(?:[,:\\)]|\\bas\\b))",
      "beginCaptures": {
        "1": { "name": "keyword.operator" }
      },
      "patterns": [
        { "include": "#value-expression" }
      ]
    },
    "value-expression-record": {
      "begin": "\\{",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-record-item" }
      ]
    },
    "value-expression-record-field": {
      "begin": "(\\.\\.\\.)?\\b([_a-z][_'0-9A-Za-z]*)",
      "end": "(?:(,)|(?=\\}))",
      "beginCaptures": {
        "1": { "name": "keyword.other" },
        "2": { "name": "constant.language.field.reason" }
      },
      "endCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        {
          "begin": "\\G(:)",
          "end": "(?=[,\\}])",
          "beginCaptures": {
            "1": { "name": "keyword.operator.reason" }
          },
          "patterns": [
            { "include": "#value-expression" }
          ]
        }
      ]
    },
    "value-expression-record-item": {
      "patterns": [
        { "include": "#module-expression-path" },
        { "include": "#value-expression-record-field" }
      ]
    },
    "value-expression-record-path": {
      "begin": "\\b[a-z][_'0-9A-Za-z]*\\b",
      "end": "(?!\\.)",
      "patterns": [
        {
          "match": "(\\.)[[:space:]]*\\(([a-z][_'0-9A-Za-z]*)\\)",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "variable.parameter" }
          }
        },
        {
          "match": "(\\.)[[:space:]]*\\b([A-Z][_'0-9A-Za-z]*)\\b",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "entity.name.class" }
          }
        },
        {
          "match": "(\\.)[[:space:]]*\\b([a-z][_'0-9A-Za-z]*)\\b",
          "captures": {
            "1": { "name": "keyword.operator" },
            "2": { "name": "constant.language" }
          }
        }
      ]
    },
    "value-expression-switch": {
      "begin": "(?=\\bswitch\\b)",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-switch-head" },
        { "include": "#value-expression-switch-body" }
      ]
    },
    "value-expression-switch-head": {
      "begin": "\\b(switch)\\b",
      "end": "(?=\\{)",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        {
          "comment": "FIXME: parens; anchor",
          "include": "#value-expression"
        }
      ]
    },
    "value-expression-switch-body": {
      "begin": "\\{",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-switch-pattern-match-rule" }
      ]
    },
    "value-expression-switch-pattern-match-rule": {
      "patterns": [
        { "include": "#value-expression-switch-pattern-match-rule-lhs" },
        { "include": "#value-expression-switch-pattern-match-rule-rhs" }
      ]
    },
    "value-expression-switch-pattern-match-rule-lhs": {
      "begin": "(\\|)",
      "end": "(?==>)",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#pattern-guard" },
        { "include": "#pattern" }
      ]
    },
    "value-expression-switch-pattern-match-rule-rhs": {
      "begin": "(=>)",
      "end": "(?=[\\|\\}])",
      "beginCaptures": {
        "1": { "name": "keyword.operator.reason" }
      },
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-block-item" }
      ]
    },
    "value-expression-try": {
      "begin": "(?=\\btry\\b)",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-try-head" },
        { "include": "#value-expression-try-body" }
      ]
    },
    "value-expression-try-head": {
      "begin": "\\b(try)\\b",
      "end": "(?=\\{)",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      }
    },
    "value-expression-try-body": {
      "begin": "\\{",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#comment" },
        { "include": "#value-expression-switch-pattern-match-rule" }
      ]
    },
    "value-expression-while": {
      "begin": "(?=\\bwhile\\b)",
      "end": "\\}",
      "patterns": [
        { "include": "#value-expression-while-head" },
        { "include": "#value-expression-block" }
      ]
    },
    "value-expression-while-head": {
      "begin": "\\b(while)\\b",
      "end": "(?=\\{)",
      "beginCaptures": {
        "1": { "name": "keyword.control.reason" }
      },
      "patterns": [
        {
          "comment": "FIXME: parens; anchor",
          "include": "#value-expression"
        }
      ]
    },
    "value-expression-record-look": {
      "begin": "(?=\\.\\.\\.|([A-Z][_'0-9A-Za-z]*\\.)*([a-z][_'0-9A-Za-z]*)[[:space:]]*[,:\\}])",
      "end": "(?=\\})",
      "patterns": [
        { "include": "#value-expression-record-item" }
      ]
    }
  }
}
